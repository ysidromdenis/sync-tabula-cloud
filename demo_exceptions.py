#!/usr/bin/env python3
"""
Script de demostraci√≥n del sistema de excepciones personalizadas de Tabula Cloud Sync.

Este script muestra c√≥mo las nuevas excepciones funcionan en diferentes escenarios.
"""

import sys
import traceback

from tabula_cloud_sync.core.exceptions import *
from tabula_cloud_sync.core.session import Session


def demo_excepciones_basicas():
    """Demuestra el uso b√°sico de las excepciones personalizadas."""
    print("üîç Demo: Excepciones B√°sicas")
    print("=" * 50)

    # 1. TabulaCloudException b√°sica
    try:
        raise TabulaCloudException(
            "Error de demostraci√≥n",
            error_code="DEMO_001",
            details={"tipo": "demo", "nivel": "info"},
        )
    except TabulaCloudException as e:
        print(f"‚úÖ TabulaCloudException capturada:")
        print(f"   Mensaje: {e.message}")
        print(f"   C√≥digo: {e.error_code}")
        print(f"   Detalles: {e.details}")
        print(f"   String: {str(e)}")
        print(f"   Dict: {e.to_dict()}")

    print()

    # 2. ValidationException con campo
    try:
        raise ValidationException(
            "El email no es v√°lido",
            field="email",
            details={
                "value": "email_invalido",
                "expected_format": "user@domain.com",
            },
        )
    except ValidationException as e:
        print(f"‚úÖ ValidationException capturada:")
        print(f"   Mensaje: {e.message}")
        print(f"   Campo: {e.field}")
        print(f"   String: {str(e)}")

    print()


def demo_handle_api_error():
    """Demuestra la funci√≥n handle_api_error."""
    print("üåê Demo: Manejo de Errores de API")
    print("=" * 50)

    codigos_test = [400, 401, 403, 404, 429, 500, 502]

    for codigo in codigos_test:
        try:
            exc = handle_api_error(codigo)
            raise exc
        except TabulaCloudException as e:
            print(f"‚úÖ C√≥digo {codigo} -> {e.__class__.__name__}: {e.message}")

    print()


def demo_wrap_requests_exception():
    """Demuestra la conversi√≥n de excepciones de requests."""
    print("üîÑ Demo: Conversi√≥n de Excepciones de Requests")
    print("=" * 50)

    from unittest.mock import Mock

    import requests

    # Simular diferentes tipos de excepciones de requests
    excepciones_test = [
        requests.exceptions.ConnectionError("No se pudo conectar"),
        requests.exceptions.Timeout("Tiempo de espera agotado"),
        requests.exceptions.SSLError("Error de certificado SSL"),
        requests.exceptions.ProxyError("Error del proxy"),
        requests.exceptions.TooManyRedirects("Demasiados redireccionamientos"),
    ]

    for exc_original in excepciones_test:
        try:
            exc_convertida = wrap_requests_exception(exc_original)
            raise exc_convertida
        except TabulaCloudException as e:
            print(
                f"‚úÖ {exc_original.__class__.__name__} -> {e.__class__.__name__}"
            )
            print(f"   Original: {str(exc_original)}")
            print(f"   Convertida: {e.message}")

    print()


def demo_session_con_excepciones():
    """Demuestra c√≥mo la clase Session usa las nuevas excepciones."""
    print("üíæ Demo: Session con Excepciones Personalizadas")
    print("=" * 50)

    # Crear una sesi√≥n de prueba
    session = Session("token-de-prueba")
    print(f"‚úÖ Sesi√≥n creada correctamente")
    print(f"   Headers: {session.headers}")

    # Demostrar el manejo de excepciones (sin hacer requests reales)
    print("‚úÖ La sesi√≥n est√° configurada para usar excepciones personalizadas")
    print("   - Los errores HTTP se convierten autom√°ticamente")
    print("   - Los errores de red usan ConnectionException/TimeoutException")
    print("   - Los errores de autenticaci√≥n usan AuthenticationException")

    print()


def demo_validacion_modelos():
    """Demuestra las excepciones en validaci√≥n de modelos."""
    print("üìã Demo: Validaci√≥n de Modelos")
    print("=" * 50)

    # Test con modelo Currency del m√≥dulo base
    try:
        from tabula_cloud_sync.models.base import Currency

        # Intentar crear un Currency con decimal inv√°lido
        try:
            currency = Currency(
                id="USD",
                nombre="D√≥lar",
                simbolo="$",
                decimal=15,  # Inv√°lido: debe estar entre 0 y 8
            )
        except ValidationException as e:
            print(f"‚úÖ ValidationException en modelo Currency:")
            print(f"   Campo: {e.field}")
            print(f"   Mensaje: {e.message}")
        except Exception as e:
            # Pydantic podr√≠a envolver nuestra excepci√≥n
            print(f"‚úÖ Excepci√≥n capturada en validaci√≥n: {type(e).__name__}")
            print(f"   Mensaje: {str(e)}")

    except ImportError as e:
        print(f"‚ÑπÔ∏è  Modelo Currency no disponible: {e}")

    print()


def demo_manejo_jerarquico():
    """Demuestra el manejo jer√°rquico de excepciones."""
    print("üå≥ Demo: Manejo Jer√°rquico de Excepciones")
    print("=" * 50)

    excepciones_test = [
        AuthenticationException("Token inv√°lido"),
        ValidationException("Campo requerido", field="nombre"),
        BusinessLogicException("Regla de negocio violada"),
        ConnectionException("No se pudo conectar al servidor"),
    ]

    for exc in excepciones_test:
        try:
            raise exc
        except AuthenticationException:
            print(f"‚úÖ Manejo espec√≠fico para autenticaci√≥n: {exc.message}")
        except ValidationException as e:
            print(
                f"‚úÖ Manejo espec√≠fico para validaci√≥n: {e.message} (campo: {e.field})"
            )
        except TabulaCloudException as e:
            print(
                f"‚úÖ Manejo gen√©rico para Tabula Cloud: {e.__class__.__name__} - {e.message}"
            )
        except Exception as e:
            print(f"‚úÖ Manejo gen√©rico: {type(e).__name__} - {str(e)}")

    print()


def demo_logging_estructurado():
    """Demuestra c√≥mo hacer logging estructurado con las excepciones."""
    print("üìù Demo: Logging Estructurado")
    print("=" * 50)

    import json

    try:
        raise APIException(
            "Error en la API de contactos",
            status_code=422,
            response_data={"error": "Validation failed", "field": "email"},
        )
    except APIException as e:
        # Convertir a dict para logging estructurado
        error_dict = e.to_dict()
        print("‚úÖ Error convertido a diccionario para logging:")
        print(json.dumps(error_dict, indent=2, ensure_ascii=False))

    print()


def main():
    """Ejecuta todas las demostraciones."""
    print("üöÄ DEMOSTRACI√ìN DEL SISTEMA DE EXCEPCIONES PERSONALIZADAS")
    print("üöÄ Tabula Cloud Sync - Excepciones Personalizadas")
    print("=" * 80)
    print()

    demos = [
        demo_excepciones_basicas,
        demo_handle_api_error,
        demo_wrap_requests_exception,
        demo_session_con_excepciones,
        demo_validacion_modelos,
        demo_manejo_jerarquico,
        demo_logging_estructurado,
    ]

    for demo in demos:
        try:
            demo()
        except Exception as e:
            print(f"‚ùå Error en {demo.__name__}: {e}")
            traceback.print_exc()
            print()

    print("üéâ DEMOSTRACI√ìN COMPLETADA")
    print("=" * 80)
    print()
    print("üìö Para m√°s informaci√≥n, consulta:")
    print("   - docs/EXCEPTIONS.md")
    print("   - examples/exceptions_usage.py")
    print("   - tests/test_exceptions.py")


if __name__ == "__main__":
    main()
