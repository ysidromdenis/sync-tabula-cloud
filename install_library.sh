#!/bin/bash

# Script de instalaci√≥n mejorado para Tabula Cloud Sync Librer√≠a
# Versi√≥n 2.0 - Ahora como librer√≠a reutilizable

set -e

echo "üöÄ Instalando Tabula Cloud Sync Librer√≠a..."

# Detectar Python
if command -v python3 &> /dev/null; then
    PYTHON=python3
elif command -v python &> /dev/null; then
    PYTHON=python
else
    echo "‚ùå Error: Python no encontrado. Instala Python 3.7+ primero."
    exit 1
fi

# Verificar versi√≥n de Python
PYTHON_VERSION=$($PYTHON -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
echo "üìç Python detectado: $PYTHON_VERSION"

if [[ $(echo "$PYTHON_VERSION < 3.7" | bc -l) -eq 1 ]]; then
    echo "‚ùå Error: Se requiere Python 3.7 o superior. Versi√≥n actual: $PYTHON_VERSION"
    exit 1
fi

# Verificar pip
if ! command -v pip &> /dev/null && ! command -v pip3 &> /dev/null; then
    echo "‚ùå Error: pip no encontrado. Instala pip primero."
    exit 1
fi

PIP=$(command -v pip3 || command -v pip)

# Opciones de instalaci√≥n
INSTALL_MODE="basic"
INSTALL_DEV=false
INSTALL_DATABASE=false
PROJECT_DIR=""

# Procesar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        --dev)
            INSTALL_DEV=true
            shift
            ;;
        --database)
            INSTALL_DATABASE=true
            shift
            ;;
        --project-dir)
            PROJECT_DIR="$2"
            shift 2
            ;;
        --help)
            echo "Uso: $0 [opciones]"
            echo ""
            echo "Opciones:"
            echo "  --dev          Instalar dependencias de desarrollo"
            echo "  --database     Instalar soporte para bases de datos"
            echo "  --project-dir  Directorio donde inicializar el proyecto"
            echo "  --help         Mostrar esta ayuda"
            exit 0
            ;;
        *)
            echo "‚ùå Opci√≥n desconocida: $1"
            echo "Usa --help para ver opciones disponibles"
            exit 1
            ;;
    esac
done

# Determinar comando de instalaci√≥n
INSTALL_CMD="$PIP install tabula-cloud-sync"

if [[ "$INSTALL_DEV" == true ]]; then
    INSTALL_CMD="$INSTALL_CMD[dev]"
    echo "üì¶ Modo: Desarrollo (incluye dependencias de dev)"
elif [[ "$INSTALL_DATABASE" == true ]]; then
    INSTALL_CMD="$INSTALL_CMD[database]"
    echo "üì¶ Modo: Con soporte para bases de datos"
else
    echo "üì¶ Modo: Instalaci√≥n b√°sica"
fi

# Instalar librer√≠a
echo "‚¨áÔ∏è  Instalando librer√≠a..."
if [[ -f "setup.py" ]]; then
    # Instalaci√≥n local (desarrollo)
    echo "üìÅ Detectado setup.py local - Instalando en modo desarrollo..."
    $PIP install -e .
    
    if [[ "$INSTALL_DEV" == true ]]; then
        $PIP install -e .[dev]
    fi
    
    if [[ "$INSTALL_DATABASE" == true ]]; then
        $PIP install -e .[database]
    fi
else
    # Instalaci√≥n desde PyPI
    eval "$INSTALL_CMD"
fi

echo "‚úÖ Librer√≠a instalada exitosamente"

# Verificar instalaci√≥n
echo "üîç Verificando instalaci√≥n..."
if $PYTHON -c "import tabula_cloud_sync; print(f'Tabula Cloud Sync v{tabula_cloud_sync.__version__} instalado correctamente')" 2>/dev/null; then
    echo "‚úÖ Verificaci√≥n exitosa"
else
    echo "‚ùå Error en la verificaci√≥n de instalaci√≥n"
    exit 1
fi

# Inicializar proyecto si se especific√≥ directorio
if [[ -n "$PROJECT_DIR" ]]; then
    echo "üèóÔ∏è  Inicializando proyecto en: $PROJECT_DIR"
    
    if [[ ! -d "$PROJECT_DIR" ]]; then
        mkdir -p "$PROJECT_DIR"
    fi
    
    cd "$PROJECT_DIR"
    
    # Usar CLI para inicializar
    if command -v tabula-cli &> /dev/null; then
        echo "üìã Ejecutando configuraci√≥n inicial..."
        tabula-cli init --project-name "$(basename "$PROJECT_DIR")"
        echo "‚úÖ Proyecto inicializado en $PROJECT_DIR"
    else
        echo "‚ö†Ô∏è  CLI no disponible, creando estructura b√°sica..."
        
        # Crear estructura b√°sica manualmente
        mkdir -p config logs data cache services models
        
        # Crear archivo de configuraci√≥n b√°sico
        cat > config/tabula_config.ini << 'EOF'
[API]
base_url = https://api.tabula.com.py
version = v1
api_key = YOUR_API_KEY_HERE
timeout = 30

[SYNC]
interval = 300
batch_size = 100
retry_attempts = 3
auto_start = true

[LOGGING]
level = INFO
file = logs/tabula_service.log
max_size = 10MB
backup_count = 5
EOF
        
        echo "üìÅ Estructura b√°sica creada"
        echo "‚öôÔ∏è  Edita config/tabula_config.ini con tus credenciales"
    fi
fi

# Informaci√≥n final
echo ""
echo "üéâ Instalaci√≥n completada exitosamente!"
echo ""
echo "üìù Pr√≥ximos pasos:"
echo "   1. Importa la librer√≠a: from tabula_cloud_sync import TabulaCloudService"
echo "   2. Crea tu servicio personalizado heredando de TabulaCloudService"
echo "   3. Implementa el m√©todo perform_sync() con tu l√≥gica"
echo ""
echo "üõ†Ô∏è  Comandos disponibles:"
echo "   tabula-cli init          - Inicializar nuevo proyecto"
echo "   tabula-cli status        - Ver estado del proyecto actual"
echo "   tabula-service start     - Iniciar servicio como daemon"
echo ""
echo "üìñ Documentaci√≥n: https://github.com/ysidromdenis/template-sync-tabula-cloud"
echo "üí¨ Soporte: contacto@tabula.com.py"

# Detectar shell para sugerir actualizaci√≥n de PATH
if [[ -n "$SHELL" ]]; then
    echo ""
    echo "üí° Tip: Si los comandos CLI no funcionan, ejecuta:"
    echo "   source ~/.bashrc  # o ~/.zshrc seg√∫n tu shell"
fi
