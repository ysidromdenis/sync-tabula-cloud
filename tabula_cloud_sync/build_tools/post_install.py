"""
Post-installation hooks para Tabula Cloud Sync.

Este m√≥dulo contiene funciones que se ejecutan autom√°ticamente despu√©s
de instalar la librer√≠a para configurar el entorno del usuario.
"""

import os
import shutil
import sys
from pathlib import Path
from typing import Dict, List, Optional

from ..config.builder import ConfigBuilder
from ..utils.commons import ensure_directory
from .project_detector import ProjectDetector
from .template_generator import TemplateGenerator


class PostInstallHooks:
    """Hooks de post-instalaci√≥n para configurar autom√°ticamente el entorno."""

    @staticmethod
    def run_post_install() -> None:
        """
        Ejecuta todos los hooks de post-instalaci√≥n.

        Este m√©todo se llama autom√°ticamente despu√©s de instalar la librer√≠a.
        """
        try:
            print("üöÄ Configurando Tabula Cloud Sync...")

            # Detectar el directorio del proyecto del usuario
            project_root = PostInstallHooks._detect_project_root()

            if project_root:
                print(f"üìÅ Proyecto detectado en: {project_root}")

                # Crear estructura de directorios
                PostInstallHooks._create_project_structure(project_root)

                # Generar archivos de configuraci√≥n
                PostInstallHooks._generate_config_files(project_root)

                # Configurar logging
                PostInstallHooks._setup_logging(project_root)

                # Generar templates base
                PostInstallHooks._generate_templates(project_root)

                print("‚úÖ Configuraci√≥n completada exitosamente!")
                print(
                    "üí° Consulta la documentaci√≥n en: https://github.com/ysidromdenis/template-sync-tabula-cloud"
                )
            else:
                print(
                    "‚ÑπÔ∏è  No se detect√≥ un proyecto Python. La configuraci√≥n se realizar√° al importar la librer√≠a."
                )

        except Exception as e:
            print(f"‚ö†Ô∏è  Error durante la configuraci√≥n: {e}")
            print(
                "üîß Puedes ejecutar 'tabula-cli init' manualmente para configurar el proyecto."
            )

    @staticmethod
    def _detect_project_root() -> Optional[Path]:
        """Detecta el directorio ra√≠z del proyecto del usuario."""
        current_dir = Path.cwd()

        # Buscar indicadores de proyecto Python
        project_indicators = [
            "setup.py",
            "pyproject.toml",
            "requirements.txt",
            "main.py",
            "__main__.py",
            ".git",
        ]

        # Buscar hacia arriba hasta encontrar indicadores
        for path in [current_dir] + list(current_dir.parents):
            if any((path / indicator).exists() for indicator in project_indicators):
                return path

        # Si no encuentra, usar directorio actual
        return current_dir

    @staticmethod
    def _create_project_structure(project_root: Path) -> None:
        """Crea la estructura b√°sica de directorios."""
        directories = [
            "logs",
            "config",
            "cache",
            "data",
            "backups",
            "templates",
            "services",
        ]

        for directory in directories:
            dir_path = project_root / directory
            ensure_directory(str(dir_path))

        print("üìÇ Estructura de directorios creada")

    @staticmethod
    def _generate_config_files(project_root: Path) -> None:
        """Genera archivos de configuraci√≥n base."""
        config_builder = ConfigBuilder(project_root)

        # Generar config.ini principal
        config_builder.generate_main_config()

        # Generar archivo de configuraci√≥n de logging
        config_builder.generate_logging_config()

        # Generar archivo de configuraci√≥n de base de datos
        config_builder.generate_database_config()

        print("‚öôÔ∏è  Archivos de configuraci√≥n generados")

    @staticmethod
    def _setup_logging(project_root: Path) -> None:
        """Configura el sistema de logging."""
        logs_dir = project_root / "logs"
        ensure_directory(str(logs_dir))

        # Crear archivos de log base
        log_files = ["tabula_service.log", "sync_errors.log", "debug.log"]

        for log_file in log_files:
            log_path = logs_dir / log_file
            if not log_path.exists():
                log_path.touch()

        print("üìã Sistema de logging configurado")

    @staticmethod
    def _generate_templates(project_root: Path) -> None:
        """Genera templates base para el proyecto."""
        template_generator = TemplateGenerator(project_root)

        # Generar servicio base
        template_generator.generate_service_template()

        # Generar modelo base
        template_generator.generate_model_template()

        # Generar configuraci√≥n de daemon
        template_generator.generate_daemon_template()

        print("üìÑ Templates base generados")


class ImportTimeHooks:
    """Hooks que se ejecutan al importar la librer√≠a."""

    @staticmethod
    def run_import_hooks() -> None:
        """
        Ejecuta hooks al importar la librer√≠a.

        Se ejecuta autom√°ticamente cuando se importa tabula_cloud_sync.
        """
        try:
            # Detectar proyecto
            detector = ProjectDetector()

            if detector.is_new_project():
                print("üîç Nuevo proyecto detectado - Configurando Tabula Cloud Sync...")

                # Configurar proyecto autom√°ticamente
                project_root = detector.get_project_root()
                PostInstallHooks._create_project_structure(project_root)
                PostInstallHooks._generate_config_files(project_root)
                PostInstallHooks._setup_logging(project_root)

                print("‚úÖ Proyecto configurado autom√°ticamente!")

        except Exception as e:
            # Silencioso en import - no interrumpir la importaci√≥n
            pass
