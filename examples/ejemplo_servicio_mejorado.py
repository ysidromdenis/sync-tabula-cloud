"""
Ejemplo de uso de la librer√≠a Tabula Cloud Sync.

Este ejemplo muestra c√≥mo crear un servicio personalizado que utiliza
la librer√≠a como base para sincronizaci√≥n con Tabula Cloud.
"""

import json
from datetime import datetime

from tabula_cloud_sync import TabulaCloudService


class EjemploServicio(TabulaCloudService):
    """
    Ejemplo de servicio personalizado que hereda de TabulaCloudService.

    Este servicio implementa l√≥gica espec√≠fica para sincronizar
    datos de ejemplo con Tabula Cloud.
    """

    def __init__(self, config_file="config/tabula_config.ini"):
        """Inicializa el servicio de ejemplo."""
        super().__init__(config_file)

        # Variables espec√≠ficas del servicio
        self.productos_sincronizados = 0
        self.clientes_procesados = 0
        self.datos_ejemplo = []

    def on_start(self):
        """Se ejecuta al iniciar el servicio."""
        self.logger.info("=== Iniciando Servicio de Ejemplo ===")

        # Inicializaci√≥n personalizada
        self._cargar_datos_ejemplo()
        self._configurar_hooks()

        self.logger.info("Servicio de ejemplo iniciado correctamente")

    def on_stop(self):
        """Se ejecuta al detener el servicio."""
        self.logger.info("=== Deteniendo Servicio de Ejemplo ===")

        # Limpieza de recursos
        self._guardar_estadisticas()

        self.logger.info("Servicio de ejemplo detenido correctamente")

    def perform_sync(self):
        """
        Implementa la l√≥gica de sincronizaci√≥n personalizada.

        Returns:
            Dict con resultados de la sincronizaci√≥n
        """
        self.logger.info("Iniciando sincronizaci√≥n de ejemplo...")

        try:
            # Simular sincronizaci√≥n de productos
            productos_sync = self._sincronizar_productos()

            # Simular sincronizaci√≥n de clientes
            clientes_sync = self._sincronizar_clientes()

            # Actualizar estad√≠sticas
            self.productos_sincronizados += productos_sync
            self.clientes_procesados += clientes_sync

            resultado = {
                "status": "success",
                "timestamp": datetime.now().isoformat(),
                "productos_sincronizados": productos_sync,
                "clientes_procesados": clientes_sync,
                "total_productos": self.productos_sincronizados,
                "total_clientes": self.clientes_procesados,
            }

            self.logger.info(
                f"Sincronizaci√≥n completada: {json.dumps(resultado, indent=2)}"
            )
            return resultado

        except Exception as e:
            self.logger.error(f"Error en sincronizaci√≥n: {e}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat(),
            }

    def _cargar_datos_ejemplo(self):
        """Carga datos de ejemplo para el servicio."""
        self.datos_ejemplo = [
            {"id": 1, "nombre": "Producto A", "precio": 100.0},
            {"id": 2, "nombre": "Producto B", "precio": 200.0},
            {"id": 3, "nombre": "Producto C", "precio": 300.0},
        ]
        self.logger.info(
            f"Cargados {len(self.datos_ejemplo)} productos de ejemplo"
        )

    def _configurar_hooks(self):
        """Configura hooks personalizados."""

        # Hook pre-sincronizaci√≥n
        def pre_sync_hook(service):
            service.logger.debug(
                "Ejecutando preparaci√≥n pre-sincronizaci√≥n..."
            )

        # Hook post-sincronizaci√≥n
        def post_sync_hook(service, result):
            service.logger.debug(
                f"Sincronizaci√≥n completada con resultado: {result['status']}"
            )

        # Hook de error
        def error_hook(service, error):
            service.logger.warning(f"Hook de error ejecutado: {error}")

        self.add_pre_sync_hook(pre_sync_hook)
        self.add_post_sync_hook(post_sync_hook)
        self.add_error_hook(error_hook)

    def _sincronizar_productos(self):
        """
        Simula sincronizaci√≥n de productos con Tabula Cloud.

        Returns:
            N√∫mero de productos sincronizados
        """
        if not self.session:
            self.logger.warning(
                "Sesi√≥n no disponible para sincronizaci√≥n de productos"
            )
            return 0

        try:
            # Simular llamada a API de Tabula Cloud
            # En implementaci√≥n real, aqu√≠ ir√≠an las llamadas reales a la API

            productos_a_sincronizar = len(self.datos_ejemplo)

            for producto in self.datos_ejemplo:
                # Simular env√≠o a Tabula Cloud
                self.logger.debug(
                    f"Sincronizando producto: {producto['nombre']}"
                )

                # Aqu√≠ ir√≠a la l√≥gica real:
                # response = self.session.post('productos', json_data=producto)

            return productos_a_sincronizar

        except Exception as e:
            self.logger.error(f"Error sincronizando productos: {e}")
            return 0

    def _sincronizar_clientes(self):
        """
        Simula sincronizaci√≥n de clientes con Tabula Cloud.

        Returns:
            N√∫mero de clientes procesados
        """
        if not self.session:
            self.logger.warning(
                "Sesi√≥n no disponible para sincronizaci√≥n de clientes"
            )
            return 0

        try:
            # Simular procesamiento de clientes
            clientes_ejemplo = 5  # Simular 5 clientes

            for i in range(clientes_ejemplo):
                self.logger.debug(f"Procesando cliente {i+1}")

                # Aqu√≠ ir√≠a la l√≥gica real:
                # cliente_data = obtener_cliente(i)
                # response = self.session.post('clientes', json_data=cliente_data)

            return clientes_ejemplo

        except Exception as e:
            self.logger.error(f"Error sincronizando clientes: {e}")
            return 0

    def _guardar_estadisticas(self):
        """Guarda estad√≠sticas finales del servicio."""
        estadisticas = {
            "productos_sincronizados": self.productos_sincronizados,
            "clientes_procesados": self.clientes_procesados,
            "tiempo_finalizacion": datetime.now().isoformat(),
        }

        try:
            with open("logs/estadisticas_ejemplo.json", "w") as f:
                json.dump(estadisticas, f, indent=2)
            self.logger.info(
                "Estad√≠sticas guardadas en logs/estadisticas_ejemplo.json"
            )
        except Exception as e:
            self.logger.warning(f"No se pudieron guardar estad√≠sticas: {e}")

    def obtener_resumen(self):
        """
        Obtiene un resumen del estado actual del servicio.

        Returns:
            Dict con resumen del servicio
        """
        return {
            "nombre_servicio": self.__class__.__name__,
            "estado": "ejecutando" if self.running else "detenido",
            "productos_sincronizados": self.productos_sincronizados,
            "clientes_procesados": self.clientes_procesados,
            "ultima_sincronizacion": (
                self.last_sync_time.isoformat()
                if self.last_sync_time
                else None
            ),
            "errores_totales": self.error_count,
            "sincronizaciones_completadas": self.sync_count,
        }


def main():
    """Funci√≥n principal para ejecutar el servicio de ejemplo."""
    print("üöÄ Iniciando servicio de ejemplo de Tabula Cloud Sync...")

    # Crear instancia del servicio
    servicio = EjemploServicio()

    try:
        # Iniciar el servicio
        servicio.start()

        print("‚úÖ Servicio iniciado. Presiona Ctrl+C para detener.")

        # Mantener ejecut√°ndose
        import time

        while servicio.running:
            time.sleep(1)

    except KeyboardInterrupt:
        print("\nüõë Recibida se√±al de interrupci√≥n...")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        # Detener el servicio
        servicio.stop()
        print("üëã Servicio detenido")


if __name__ == "__main__":
    main()
