name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform_name: linux
            executable_extension: ""
            setup_cmd: sudo apt-get update && sudo apt-get install -y build-essential
          - os: windows-latest
            platform_name: windows
            executable_extension: ".exe"
            setup_cmd: ""
          - os: macos-latest
            platform_name: macos
            executable_extension: ""
            setup_cmd: ""

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Configurar sistema (${{ matrix.platform_name }})
        if: matrix.setup_cmd != ''
        run: ${{ matrix.setup_cmd }}

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller>=5.0.0

      - name: Instalar dependencias espec√≠ficas de Windows
        if: matrix.platform_name == 'windows'
        run: |
          pip install pywin32

      - name: Ejecutar tests
        run: |
          python -m pytest tests/ -v
        continue-on-error: true

      - name: Debug informaci√≥n del entorno (Windows)
        if: matrix.platform_name == 'windows'
        run: |
          echo "=== Informaci√≥n del entorno ==="
          pwd
          dir
          python --version
          pip list | findstr -i pyinstaller
          echo "=== Contenido de __main__.py ==="
          if (Test-Path "__main__.py") { Get-Content "__main__.py" | Select-Object -First 20 } else { echo "No existe __main__.py" }
        shell: pwsh

      - name: Debug informaci√≥n del entorno (Unix)
        if: matrix.platform_name != 'windows'
        run: |
          echo "=== Informaci√≥n del entorno ==="
          pwd
          ls -la
          python --version
          pip list | grep -i pyinstaller || echo "PyInstaller no instalado"
          echo "=== Archivos del proyecto ==="
          ls -la
          echo "=== Contenido de __main__.py ==="
          head -20 __main__.py || echo "No existe __main__.py"

      - name: Compilar ejecutable
        run: |
          echo "Iniciando compilaci√≥n del ejecutable..."
          python build_executable.py --no-installer
        continue-on-error: false
        env:
          PYTHONIOENCODING: utf-8

      - name: Verificar ejecutable
        run: |
          echo "Verificando ejecutable compilado..."
          python build_executable.py --verify-only
        continue-on-error: false
        env:
          PYTHONIOENCODING: utf-8

      - name: Crear paquete de distribuci√≥n
        run: |
          python build_executable.py
        env:
          PYTHONIOENCODING: utf-8

      - name: Subir ejecutable como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: tabula-cloud-sync-${{ matrix.platform_name }}
          path: |
            dist/tabula-cloud-sync${{ matrix.executable_extension }}
            config.ini.template
            README.md
            docs/
          retention-days: 30

      - name: Subir paquete de distribuci√≥n
        uses: actions/upload-artifact@v4
        with:
          name: tabula-cloud-sync-${{ matrix.platform_name }}-package
          path: |
            *.zip
            release/
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Descargar todos los artefactos
        uses: actions/download-artifact@v4

      - name: Preparar archivos para release
        run: |
          # Crear directorio temporal para release
          mkdir -p release-files

          echo "=== Artefactos descargados ==="
          ls -la

          # Procesar artefactos de cada plataforma
          for platform in linux windows macos; do
            echo "Procesando plataforma: $platform"
            
            # Buscar paquetes de distribuci√≥n
            if [ -d "tabula-cloud-sync-${platform}-package" ]; then
              echo "Encontrado paquete para $platform"
              cd "tabula-cloud-sync-${platform}-package"
              
              # Buscar archivos ZIP
              if ls *.zip 1> /dev/null 2>&1; then
                cp *.zip "../release-files/"
                echo "Copiados archivos ZIP de $platform"
              fi
              
              cd ..
            fi
            
            # Buscar ejecutables standalone
            if [ -d "tabula-cloud-sync-${platform}" ]; then
              echo "Encontrado ejecutable standalone para $platform"
              cd "tabula-cloud-sync-${platform}"
              
              # Crear ZIP del ejecutable standalone si no existe
              if [ "$platform" = "windows" ]; then
                if [ -f "tabula-cloud-sync.exe" ]; then
                  zip -r "../release-files/tabula-cloud-sync-${platform}-standalone.zip" . -x "*.git*"
                fi
              else
                if [ -f "tabula-cloud-sync" ]; then
                  zip -r "../release-files/tabula-cloud-sync-${platform}-standalone.zip" . -x "*.git*"
                fi
              fi
              
              cd ..
            fi
          done

          # Listar archivos preparados
          echo "=== Archivos preparados para release ==="
          ls -la release-files/

          # Crear archivo con checksums
          if [ -d "release-files" ] && [ "$(ls -A release-files)" ]; then
            cd release-files
            sha256sum *.zip > checksums.txt
            echo "=== Checksums creados ==="
            cat checksums.txt
            cd ..
          else
            echo "No se encontraron archivos para release"
            exit 1
          fi

      - name: Crear release
        uses: softprops/action-gh-release@v1
        with:
          name: Tabula Cloud Sync ${{ github.ref_name }}
          body: |
            ## Tabula Cloud Sync Service ${{ github.ref_name }}

            ### üì¶ Ejecutables Compilados

            Esta release incluye ejecutables precompilados para m√∫ltiples plataformas:

            - **Windows**: `tabula-cloud-sync-windows-*.zip`
            - **Linux**: `tabula-cloud-sync-linux-*.zip` 
            - **macOS**: `tabula-cloud-sync-macos-*.zip`

            ### üöÄ Instalaci√≥n R√°pida

            1. **Descargar** el archivo ZIP para tu plataforma
            2. **Extraer** el contenido en un directorio
            3. **Ejecutar** el script de instalaci√≥n incluido
            4. **Configurar** `config.ini` con tus credenciales
            5. **Instalar** como servicio: `./tabula-cloud-sync install`

            ### ‚ú® Caracter√≠sticas

            - ‚úÖ Ejecutable standalone (no requiere Python)
            - ‚úÖ Instalaci√≥n autom√°tica como servicio del sistema
            - ‚úÖ Soporte completo para Windows, Linux y macOS
            - ‚úÖ Configuraci√≥n flexible mediante archivo INI
            - ‚úÖ Logging avanzado con rotaci√≥n autom√°tica
            - ‚úÖ Recuperaci√≥n autom√°tica de errores
            - ‚úÖ Interfaz de l√≠nea de comandos completa

            ### üìö Documentaci√≥n

            Consulta la documentaci√≥n completa en el directorio `docs/` incluido en cada paquete.

            ### üîê Verificaci√≥n de Integridad

            Usa el archivo `checksums.txt` para verificar la integridad de los descargas:

            ```bash
            sha256sum -c checksums.txt
            ```

            ### üìã Notas de la Versi√≥n

            - Build autom√°tico desde commit: ${{ github.sha }}
            - Fecha de compilaci√≥n: ${{ github.run_id }}
            - Python version: 3.9
            - PyInstaller version: 6.x

          files: |
            release-files/*.zip
            release-files/checksums.txt
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # docker:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout c√≥digo
  #       uses: actions/checkout@v4

  #     - name: Configurar Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login a Docker Hub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Extraer metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: tuempresa/tabula-cloud-sync
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}

  #     - name: Build y push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./docker/Dockerfile
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
